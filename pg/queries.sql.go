// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package pg

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO member (name, age)
VALUES ($1, $2)
RETURNING id, name, age
`

type CreateMemberParams struct {
	Name string
	Age  int32
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember, arg.Name, arg.Age)
	var i Member
	err := row.Scan(&i.ID, &i.Name, &i.Age)
	return i, err
}

const createSkill = `-- name: CreateSkill :one
INSERT INTO skill (name, descs, member_id)
VALUES ($1, $2, $3)
RETURNING id, name, descs, member_id
`

type CreateSkillParams struct {
	Name     string
	Descs    string
	MemberID int64
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill, arg.Name, arg.Descs, arg.MemberID)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Descs,
		&i.MemberID,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :one
DELETE FROM member
WHERE id = $1
RETURNING id, name, age
`

func (q *Queries) DeleteMember(ctx context.Context, id int64) (Member, error) {
	row := q.db.QueryRowContext(ctx, deleteMember, id)
	var i Member
	err := row.Scan(&i.ID, &i.Name, &i.Age)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :one
DELETE FROM skill
WHERE id = $1
RETURNING id, name, descs, member_id
`

func (q *Queries) DeleteSkill(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRowContext(ctx, deleteSkill, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Descs,
		&i.MemberID,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT id, name, age FROM member
WHERE id = $1
`

func (q *Queries) GetMember(ctx context.Context, id int64) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(&i.ID, &i.Name, &i.Age)
	return i, err
}

const getSkill = `-- name: GetSkill :one
SELECT id, name, descs, member_id FROM skill
WHERE id = $1
`

func (q *Queries) GetSkill(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Descs,
		&i.MemberID,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, name, age FROM member
ORDER BY name
`

func (q *Queries) ListMembers(ctx context.Context) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(&i.ID, &i.Name, &i.Age); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSkills = `-- name: ListSkills :many
SELECT id, name, descs, member_id FROM skill
ORDER BY name
`

func (q *Queries) ListSkills(ctx context.Context) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, listSkills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Descs,
			&i.MemberID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSkillsByMemberID = `-- name: ListSkillsByMemberID :many
SELECT skill.id, skill.name, skill.descs, skill.member_id FROM skill, member
WHERE member.id = skill.member_id AND skill.member_id = $1
`

func (q *Queries) ListSkillsByMemberID(ctx context.Context, memberID int64) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, listSkillsByMemberID, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Descs,
			&i.MemberID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :one
UPDATE member
SET name = $2, age = $3
WHERE id = $1
RETURNING id, name, age
`

type UpdateMemberParams struct {
	ID   int64
	Name string
	Age  int32
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember, arg.ID, arg.Name, arg.Age)
	var i Member
	err := row.Scan(&i.ID, &i.Name, &i.Age)
	return i, err
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE skill
SET name = $2, descs = $3, member_id = $4
WHERE id = $1
RETURNING id, name, descs, member_id
`

type UpdateSkillParams struct {
	ID       int64
	Name     string
	Descs    string
	MemberID int64
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, updateSkill,
		arg.ID,
		arg.Name,
		arg.Descs,
		arg.MemberID,
	)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Descs,
		&i.MemberID,
	)
	return i, err
}
